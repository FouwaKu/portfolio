{"version":3,"file":"static/js/33.4f559d41.chunk.js","mappings":"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","sources":["model/LoginModel.js","components/login/Login.js"],"sourcesContent":["export class LoginModel {\n    email = '';\n    password = '';\n}","import {Formik, Form, Field, ErrorMessage} from 'formik';\nimport { useState, useEffect } from 'react';\nimport * as Yup from 'yup';\nimport Loader from '../loader/Loader';\nimport { LoginModel } from '../../model/LoginModel';\nimport {  useDispatch, useSelector,   } from \"react-redux\";\nimport { NavLink, useNavigate } from \"react-router-dom\";\nimport {updateShowLoader, setErrorMessage, setSuccessMessage} from '../../store/reducers/loaderSlice';\nimport { loginAth } from '../../store/reducers/AuthSlice';\nimport { formatError, runLogoutTimer } from '../../services/SignupService';\nimport AlertError from '../alerts/AlertError';\nimport AlertSuccess from '../alerts/AlertSuccess';\nimport '../register/Register.css';\n\nconst Login = (props) => {\n    \n    const validationSchema = Yup.object().shape({\n        email : Yup.string().email(' Invalid email address').required('email is required'),\n        password : Yup.string().required('password is required'),\n    });\n    const [loginForm, setLoginForm] = useState(new LoginModel());\n    const dispatch = useDispatch();\n    const showLoading = useSelector(state => state.loader.showLoader);\n    const errorMessage = useSelector(state => state.loader.errorMessage);\n    const successMessage = useSelector(state => state.loader.successMessage);\n    const navigate = useNavigate();\n    \n    function handleSignUpFormSubmit(values,actions){\n        dispatch(updateShowLoader(true));\n        dispatch(loginAth(values)).then(response =>{\n            const types = response.type.split('/');\n            const type = types[types.length - 1];\n\n            if(type === 'fulfilled'){\n                actions.resetForm();\n                dispatch(setErrorMessage(''));\n                dispatch(setSuccessMessage('login Successfully!'));\n                runLogoutTimer(dispatch, response.payload.expiresIn * 1000, navigate);\n                navigate('/admin');\n            }\n            else if(type === 'rejected'){\n                const message = formatError(response.payload.error);\n                dispatch(setErrorMessage(message));\n                dispatch(setSuccessMessage(''));\n            }\n            \n        })\n        \n    }\n\n    useEffect(()=>{\n        dispatch(setErrorMessage(''));\n        dispatch(setSuccessMessage(''));\n    }, []);\n\n    return (\n        <div className=\"container\">\n            { showLoading && <Loader /> }\n            {errorMessage && <AlertError/>}\n            {successMessage && <AlertSuccess />}\n            <section className=\"section register min-vh-100 d-flex flex-column align-items-center justify-content-center py-4\">\n                <div className=\"container\">\n                <div className=\"row justify-content-center\">\n                    <div className=\"col-lg-4 col-md-6 d-flex flex-column align-items-center justify-content-center\">\n\n                    <div className=\"d-flex justify-content-center py-4\">\n                        <a href=\"#\" className=\"logo d-flex align-items-center w-auto\">\n                            <span className=\"d-none d-lg-block\">FKTECH</span>\n                        </a>\n                    </div>\n\n                    <div className=\"card mb-3\">\n\n                        <div className=\"card-body\">\n\n                        <div className=\"pt-4 pb-2\">\n                            <h5 className=\"card-title text-center pb-0 fs-4\">Login to Your Account</h5>\n                            <p className=\"text-center small\">Enter your username & password to login</p>\n                        </div>\n\n                        <Formik enableReinitialize initialValues={loginForm} \n                            onSubmit={handleSignUpFormSubmit} \n                            validationSchema={validationSchema} >\n                             {({touched, errors}) => (\n                                <Form className=\"row g-3 needs-validation\">\n                                    <div className=\"col-12\">\n                                        <label  className=\"form-label\">Email</label>\n                                        <div className=\"input-group has-validation\">\n                                            <span className=\"input-group-text\" id=\"inputGroupPrepend\">@</span>\n                                            <Field type=\"email\" name=\"email\" id=\"email\"  className={`form-control \n                                            ${touched.email && errors.email && 'is-invalid'} ${touched.email && !errors.email && 'is-valid'}`  }/>\n                                            <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\"/>\n                                        </div>\n                                    </div>\n                                    <div className=\"col-12\">\n                                        <label className=\"form-label\">Password</label>\n                                        <Field type=\"password\" name=\"password\" id=\"password\"  className={`form-control \n                                        ${touched.password && errors.password && 'is-invalid'} \n                                        ${touched.password && !errors.password && 'is-valid'}`  }/>\n                                        <ErrorMessage name=\"password\" component=\"div\" className=\"invalid-feedback\"/>\n                                    </div>\n                                    <div className=\"col-12\">\n                                        <div className=\"form-check\">\n                                            <Field type=\"checkbox\" name=\"remember\" value=\"true\" id=\"rememberMe\" className=\"form-check-input\" />\n                                            <label className=\"form-check-label\">Remember me</label>\n                                        </div>\n                                    </div>\n                                    <div className=\"col-12\">\n                                        <button className=\"btn btn-primary w-100\" type=\"submit\">Login</button>\n                                    </div>\n                                </Form>\n                             )}\n                             \n                        </Formik>\n                            <div className=\"col-12 mt-2\">\n                                <p className=\"small mb-0\">Don't have account? \n                                    <NavLink to='/register'>Create an account</NavLink>\n                                </p>\n                             </div>\n                        </div>\n                    </div>\n                    </div>\n                </div>\n                </div>\n\n            </section>\n\n        </div>\n    );\n}\n\nexport default Login;"],"names":["LoginModel","constructor","email","password","props","validationSchema","Yup","shape","required","loginForm","setLoginForm","useState","dispatch","useDispatch","showLoading","useSelector","state","loader","showLoader","errorMessage","successMessage","navigate","useNavigate","useEffect","setErrorMessage","setSuccessMessage","_jsxs","className","children","_jsx","Loader","AlertError","AlertSuccess","href","Formik","enableReinitialize","initialValues","onSubmit","values","actions","updateShowLoader","loginAth","then","response","types","type","split","length","resetForm","runLogoutTimer","payload","expiresIn","message","formatError","error","_ref","touched","errors","Form","id","Field","name","concat","ErrorMessage","component","value","NavLink","to"],"sourceRoot":""}