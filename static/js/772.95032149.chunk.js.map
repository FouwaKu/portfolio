{"version":3,"file":"static/js/772.95032149.chunk.js","mappings":"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","sources":["model/RegisterModel.js","components/register/Register.js"],"sourcesContent":["export class RegisterModel {\r\n    email = '';\r\n    password = '';\r\n    confirmPassword = '';\r\n}","import {Formik, Form, Field, ErrorMessage} from 'formik';\r\nimport { useState, useEffect } from 'react';\r\nimport * as Yup from 'yup';\r\nimport {  useDispatch, useSelector,   } from \"react-redux\";\r\nimport Loader from '../loader/Loader';\r\nimport {RegisterModel} from '../../model/RegisterModel';\r\nimport {updateShowLoader, setErrorMessage, setSuccessMessage} from '../../store/reducers/loaderSlice';\r\nimport './Register.css';\r\nimport { logoutAction, signupAuth } from '../../store/reducers/AuthSlice';\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { formatError, runLogoutTimer } from '../../services/SignupService';\r\nimport AlertError from '../alerts/AlertError';\r\nimport AlertSuccess from '../alerts/AlertSuccess';\r\n\r\nconst Register = (props) => {\r\n    const validationSchema = Yup.object().shape({\r\n        email : Yup.string().email(' Invalid email address').required('email is required'),\r\n        password : Yup.string().required('password is required').min(6, 'Password must be at least 6 characters'),\r\n        confirmPassword : Yup.string().required('Please confirm your password').oneOf(\r\n            [Yup.ref('password'), null], 'Password must match'),\r\n    });\r\n    const [registerForm, setRegisterForm] = useState(new RegisterModel());\r\n    const dispatch = useDispatch();\r\n    const showLoading = useSelector(state => state.loader.showLoader);\r\n    \r\n    const errorMessage = useSelector(state => state.loader.errorMessage);\r\n    const successMessage = useSelector(state => state.loader.successMessage);\r\n    const navigate = useNavigate();\r\n\r\n    function handleSignUpFormSubmit(values,actions){\r\n        dispatch(updateShowLoader(true));\r\n        dispatch(signupAuth(values)).then(response =>{\r\n            const types = response.type.split('/');\r\n            const type = types[types.length - 1];\r\n            \r\n            if(type === 'fulfilled'){\r\n                actions.resetForm();\r\n                dispatch(setErrorMessage(''));\r\n                dispatch(setSuccessMessage('Signup Successfully!'));\r\n                runLogoutTimer(dispatch, response.payload.expiresIn * 1000, navigate);\r\n                navigate('/login');\r\n            }\r\n            else if(type === 'rejected'){\r\n                const message = formatError(response.payload.error);\r\n                dispatch(setErrorMessage(message));\r\n                dispatch(setSuccessMessage(''));\r\n            }\r\n            \r\n        })\r\n        \r\n    }\r\n\r\n    useEffect(()=>{\r\n        dispatch(setErrorMessage(''));\r\n        dispatch(setSuccessMessage(''));\r\n    }, []);\r\n\r\n    return(\r\n        <div className=\"container\">\r\n            { showLoading && <Loader /> }\r\n            {errorMessage && <AlertError/>}\r\n            {successMessage && <AlertSuccess />}\r\n            <section className=\"section register min-vh-100 d-flex flex-column align-items-center justify-content-center py-4\">\r\n                <div className=\"container\">\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col-lg-4 col-md-6 d-flex flex-column align-items-center justify-content-center\">\r\n\r\n                    <div className=\"d-flex justify-content-center py-4\">\r\n                        <a href=\"index.html\" className=\"logo d-flex align-items-center w-auto\">\r\n                        <img src=\"\" alt=\"\" />\r\n                        <span className=\"d-none d-lg-block\">FKTECH</span>\r\n                        </a>\r\n                    </div>\r\n\r\n                    <div className=\"card mb-3\">\r\n\r\n                        <div className=\"card-body\">\r\n\r\n                        <div className=\"pt-4 pb-2\">\r\n                            <h5 className=\"card-title text-center pb-0 fs-4\">Create an Account</h5>\r\n                            <p className=\"text-center small\">Enter your personal details to create account</p>\r\n                        </div>\r\n                        \r\n                        \r\n                        <Formik enableReinitialize initialValues={registerForm} \r\n                            onSubmit={handleSignUpFormSubmit} \r\n                            validationSchema={validationSchema} >\r\n                             {({touched, errors}) => (\r\n                                <Form className=\"row g-3 needs-validation\">\r\n                                    <div className=\"col-12\">\r\n                                        <label for=\"email\" className=\"form-label\">Your Email</label>\r\n                                        <Field type=\"email\" name=\"email\" id=\"email\"  className={`form-control \r\n                                        ${touched.email && errors.email && 'is-invalid'} ${touched.email && !errors.email && 'is-valid'}`  }/>\r\n                                        <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\"/>\r\n                                    </div>\r\n                                    <div className=\"col-12\">\r\n                                        <label for=\"password\" className=\"form-label\">Password</label>\r\n                                        <Field type=\"password\" name=\"password\" id=\"password\"  className={`form-control \r\n                                        ${touched.password && errors.password && 'is-invalid'} \r\n                                        ${touched.password && !errors.password && 'is-valid'}`  }/>\r\n                                        <ErrorMessage name=\"password\" component=\"div\" className=\"invalid-feedback\"/>\r\n                                    </div>\r\n                                    <div className=\"col-12\">\r\n                                        <label for=\"confirmPassword\" className=\"form-label\">Confirm Password</label>\r\n                                        <Field type=\"password\" name=\"confirmPassword\" id=\"confirmPassword\"  className={`form-control \r\n                                        ${touched.confirmPassword && errors.confirmPassword && 'is-invalid'} \r\n                                        ${touched.confirmPassword && !errors.confirmPassword && 'is-valid'}`  }/>\r\n                                        <ErrorMessage name=\"confirmPassword\" component=\"div\" className=\"invalid-feedback\"/>\r\n                                    </div>\r\n                                    <div className=\"col-12\">\r\n                                     <button className=\"btn btn-primary w-100\" type=\"submit\">Create Account</button>\r\n                                    </div>\r\n                                    <div className=\"col-12\">\r\n                                     <p className=\"small mb-0\">Already have an account? <a href=\"/login\">Log in</a></p>\r\n                                    </div>\r\n                                </Form>\r\n                             )}\r\n                        </Formik>\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"credits\">\r\n                        Designed by FouwaKu\r\n                    </div>\r\n\r\n                    </div>\r\n                </div>\r\n                </div>\r\n\r\n            </section>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Register;"],"names":["RegisterModel","constructor","email","password","confirmPassword","props","validationSchema","Yup","shape","required","min","oneOf","registerForm","setRegisterForm","useState","dispatch","useDispatch","showLoading","useSelector","state","loader","showLoader","errorMessage","successMessage","navigate","useNavigate","useEffect","setErrorMessage","setSuccessMessage","_jsxs","className","children","_jsx","Loader","AlertError","AlertSuccess","href","src","alt","Formik","enableReinitialize","initialValues","onSubmit","values","actions","updateShowLoader","signupAuth","then","response","types","type","split","length","resetForm","runLogoutTimer","payload","expiresIn","message","formatError","error","_ref","touched","errors","Form","for","Field","name","id","concat","ErrorMessage","component"],"sourceRoot":""}